#! /usr/bin/ruby

#/ Script to get repository data from github and generate RPM spec file with
#/ genspec. Program works in interactive mode, only one required value is URL.
#/ Then you insert URL, the program will ask you to enter another values, but
#/ before asking it would suggest default value. If you accept it then just
#/ press Enter.
#/
#/ Usage: github2spec [options] [-- <genspec-options>]
#/
#/ Available options:
#/   -i, --interactive=level set interactive level:
#/                           0 -- no interaction (only ask url)
#/                           1 -- default value
#/                           2 -- full interaction (ask all values)
#/   -u, --url=url           provide url and set interactive to 0
#/   -v, --version           show version
#/   -p, --print-only        only prints genspec execution string
#/   -h, --help              show help

# (c) 2017 Mikhail Gordeev <obirvalger@altlinux.org>
# This program is free software; you can redistribute it and/or modify it
# under the terms of MIT License.
require 'octokit'
require 'optparse'
require 'shellwords'

# default value for command line options
options = {
  interactive_level: 1,
  url: nil,
  print_only: false,
}

ARGV.options do |opts|
  opts.on("-i", "--interactive=val", Integer) do |level|
    options[:interactive_level] = level unless options[:url]
  end

  opts.on("-u", "--url=val", String) do |val|
    options[:url] = val
    options[:interactive_level] = 0
  end

  opts.on("-v", "--version") { puts "1.3.10"; exit }
  opts.on("-p", "--print-only") { options[:print_only] = true }

  opts.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}' | cut -c4-" }
  opts.parse!
end

client = Octokit::Client.new

def input_with_check(prompt, optional = nil)
  puts "Default value will be '#{optional}'" if optional
  print "#{prompt}: "
  res = STDIN.gets
  # skip empty string and string containing only white spaces
  while res =~ /^\s*$/ and not optional
      puts "Parameter should not be empty"
      print "#{prompt}: "
      res = STDIN.gets
  end
  if res.chomp! == ""
    optional
  else
    res
  end
end

def get_available_types(templates_path)
  available_types = []
  begin
    Dir.foreach(templates_path) do |fname|
      available_types << fname.gsub(/.spec$/, '') if fname =~ /.spec$/
    end

  rescue Errno::ENOENT
    puts "Directory #{templates_path} does not exist or does not contain any spec templates"
  end

  available_types.sort
end

available_types = get_available_types(ENV["GENSPEC_TEMPLATES"] ||
                                      "/usr/share/spectemplates/")
def available_types.to_str
  " (#{self.join(',')})"
end

url = options[:url] || input_with_check('Package URL')

# Repositry format: user/repo
repopath = url.gsub(/^.*github.com\//,'').chomp("/")
repo = client.repo(repopath)
summary = repo[:description]
unless summary
  if options[:interactive_level] == 0
    warn "No description provided by repo"
    exit 1
  elsif options[:interactive_level] == 1
    summary =
      input_with_check("Package summary (can't get summary from repository)")
  end
end

tags = client.tags(repopath)
if tags.empty?
  if options[:interactive_level] == 0
    warn "No tags provided by repo"
    exit 1
  elsif options[:interactive_level] == 1
    version = input_with_check("Package version (can't get tags from repository)")
  end
else
  tag = tags[0][:name]
  version = tag.gsub(/^v/,'')
end

license =
  begin
    # Hash with accept needs to avoid warning about unstable API
    l = client.repository_license_contents(repopath,
                                           {accept: ""})[:license][:spdx_id]

    # Use this ugly construction because of github license api
    if l
      l
    else
      raise Octokit::NotFound
    end
  rescue Octokit::NotFound
    # Ask only in 1 interactive level because of 0 level is no interaction, and
    # if level is more than 1 it will ask later
    if options[:interactive_level] == 1
      input_with_check("Package license (can't get license from repository)")
    elsif options[:interactive_level] == 0
      warn "No license provided by repo"
      exit 1
    end
  end

# Set default type to ruby if most used language is Ruby
language = case repo[:language]
           when "Ruby"
             "ruby"
           when "Python"
             "python3"
           else
             # False means no default value
             #false
             "common"
           end

if options[:interactive_level] > 0
  if options[:interactive_level] > 1
    version = input_with_check('Package version', version)
    license = input_with_check('Package license', license)
    summary = input_with_check('Package summary', summary)
  end

  spec_type = input_with_check('Package type' + available_types, language)
  until available_types.include? spec_type
    puts "Choose one of listed variants or left blank line to use default"
    spec_type = input_with_check('Package type' + available_types, language)
  end

  name = input_with_check('Package or module name', repo[:name])
  changelog = input_with_check('Package changelog',
                               '- Initial build for Sisyphus')
  description = input_with_check('Package description', summary)
  if description == summary # Not copy summary, but use macros
    description = "%summary"
  end
else # no interaction
  spec_type = language
  name = repo[:name]
  changelog = '- Initial build for Sisyphus'
  description = "%summary"
end

exec_options = %W[genspec -t #{spec_type} -n #{name} -v #{version}
-s #{summary} -u #{url} -c #{changelog} -d #{description}
-l #{license} --tag #{tag} --git]

# Pass all remaining options (after --) to genspec
exec_options += ARGV

if options[:print_only]
  puts exec_options.shelljoin
else
  # Use system with multiple agrs to avoid shell execution
  system(*exec_options)
end
